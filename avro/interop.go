// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Interop struct {
	IntField int32 `json:"intField"`

	LongField int64 `json:"longField"`

	StringField string `json:"stringField"`

	BoolField bool `json:"boolField"`

	FloatField float32 `json:"floatField"`

	DoubleField float64 `json:"doubleField"`

	BytesField Bytes `json:"bytesField"`

	Field_NullField *types.NullVal `json:"nullField"`

	ArrayField []float64 `json:"arrayField"`

	MapField map[string]Foo `json:"mapField"`

	UnionField UnionBoolDoubleArrayBytes `json:"unionField"`

	EnumField Kind `json:"enumField"`

	FixedField MD5 `json:"fixedField"`

	RecordField Node `json:"recordField" fake:"skip"`
}

const InteropAvroCRC64Fingerprint = "\xe8,\n\x93\xa6\xa0\xb5\xa4"

func NewInterop() Interop {
	r := Interop{}
	r.ArrayField = make([]float64, 0)

	r.MapField = make(map[string]Foo)

	r.UnionField = NewUnionBoolDoubleArrayBytes()

	r.RecordField = NewNode()

	return r
}

func DeserializeInterop(r io.Reader) (Interop, error) {
	t := NewInterop()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInteropFromSchema(r io.Reader, schema string) (Interop, error) {
	t := NewInterop()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInterop(r Interop, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.IntField, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.LongField, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.StringField, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.BoolField, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.FloatField, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.DoubleField, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.BytesField, w)
	if err != nil {
		return err
	}
	err = vm.WriteNull(r.Field_NullField, w)
	if err != nil {
		return err
	}
	err = writeArrayDouble(r.ArrayField, w)
	if err != nil {
		return err
	}
	err = writeMapFoo(r.MapField, w)
	if err != nil {
		return err
	}
	err = writeUnionBoolDoubleArrayBytes(r.UnionField, w)
	if err != nil {
		return err
	}
	err = writeKind(r.EnumField, w)
	if err != nil {
		return err
	}
	err = writeMD5(r.FixedField, w)
	if err != nil {
		return err
	}
	err = writeNode(r.RecordField, w)
	if err != nil {
		return err
	}
	return err
}

func (r Interop) Serialize(w io.Writer) error {
	return writeInterop(r, w)
}

func (r Interop) Schema() string {
	return "{\"fields\":[{\"name\":\"intField\",\"type\":\"int\"},{\"name\":\"longField\",\"type\":\"long\"},{\"name\":\"stringField\",\"type\":\"string\"},{\"name\":\"boolField\",\"type\":\"boolean\"},{\"name\":\"floatField\",\"type\":\"float\"},{\"name\":\"doubleField\",\"type\":\"double\"},{\"name\":\"bytesField\",\"type\":\"bytes\"},{\"name\":\"nullField\",\"type\":\"null\"},{\"name\":\"arrayField\",\"type\":{\"items\":\"double\",\"type\":\"array\"}},{\"name\":\"mapField\",\"type\":{\"type\":\"map\",\"values\":{\"fields\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Foo\",\"type\":\"record\"}}},{\"name\":\"unionField\",\"type\":[\"boolean\",\"double\",{\"items\":\"bytes\",\"type\":\"array\"}]},{\"name\":\"enumField\",\"type\":{\"name\":\"Kind\",\"symbols\":[\"A\",\"B\",\"C\"],\"type\":\"enum\"}},{\"name\":\"fixedField\",\"type\":{\"name\":\"MD5\",\"size\":16,\"type\":\"fixed\"}},{\"name\":\"recordField\",\"type\":{\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"children\",\"type\":{\"items\":\"org.apache.avro.Node\",\"type\":\"array\"}}],\"name\":\"Node\",\"type\":\"record\"}}],\"name\":\"org.apache.avro.Interop\",\"type\":\"record\"}"
}

func (r Interop) SchemaName() string {
	return "org.apache.avro.Interop"
}

func (_ Interop) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Interop) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Interop) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Interop) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Interop) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Interop) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Interop) SetString(v string)   { panic("Unsupported operation") }
func (_ Interop) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Interop) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.IntField}

		return w

	case 1:
		w := types.Long{Target: &r.LongField}

		return w

	case 2:
		w := types.String{Target: &r.StringField}

		return w

	case 3:
		w := types.Boolean{Target: &r.BoolField}

		return w

	case 4:
		w := types.Float{Target: &r.FloatField}

		return w

	case 5:
		w := types.Double{Target: &r.DoubleField}

		return w

	case 6:
		w := BytesWrapper{Target: &r.BytesField}

		return w

	case 7:
		return r.Field_NullField
	case 8:
		r.ArrayField = make([]float64, 0)

		w := ArrayDoubleWrapper{Target: &r.ArrayField}

		return w

	case 9:
		r.MapField = make(map[string]Foo)

		w := MapFooWrapper{Target: &r.MapField}

		return &w

	case 10:
		r.UnionField = NewUnionBoolDoubleArrayBytes()

		w := types.Record{Target: &r.UnionField}

		return w

	case 11:
		w := KindWrapper{Target: &r.EnumField}

		return w

	case 12:
		w := MD5Wrapper{Target: &r.FixedField}

		return w

	case 13:
		r.RecordField = NewNode()

		w := types.Record{Target: &r.RecordField}

		return w

	}
	panic("Unknown field index")
}

func (r *Interop) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Interop) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Interop) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Interop) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Interop) HintSize(int)                     { panic("Unsupported operation") }
func (_ Interop) Finalize()                        {}

func (_ Interop) AvroCRC64Fingerprint() []byte {
	return []byte(InteropAvroCRC64Fingerprint)
}

func (r Interop) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["intField"], err = json.Marshal(r.IntField)
	if err != nil {
		return nil, err
	}
	output["longField"], err = json.Marshal(r.LongField)
	if err != nil {
		return nil, err
	}
	output["stringField"], err = json.Marshal(r.StringField)
	if err != nil {
		return nil, err
	}
	output["boolField"], err = json.Marshal(r.BoolField)
	if err != nil {
		return nil, err
	}
	output["floatField"], err = json.Marshal(r.FloatField)
	if err != nil {
		return nil, err
	}
	output["doubleField"], err = json.Marshal(r.DoubleField)
	if err != nil {
		return nil, err
	}
	output["bytesField"], err = json.Marshal(r.BytesField)
	if err != nil {
		return nil, err
	}
	output["nullField"], err = json.Marshal(r.Field_NullField)
	if err != nil {
		return nil, err
	}
	output["arrayField"], err = json.Marshal(r.ArrayField)
	if err != nil {
		return nil, err
	}
	output["mapField"], err = json.Marshal(r.MapField)
	if err != nil {
		return nil, err
	}
	output["unionField"], err = json.Marshal(r.UnionField)
	if err != nil {
		return nil, err
	}
	output["enumField"], err = json.Marshal(r.EnumField)
	if err != nil {
		return nil, err
	}
	output["fixedField"], err = json.Marshal(r.FixedField)
	if err != nil {
		return nil, err
	}
	output["recordField"], err = json.Marshal(r.RecordField)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Interop) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["intField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IntField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for intField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["longField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LongField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for longField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["stringField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StringField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for stringField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["boolField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BoolField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for boolField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["floatField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FloatField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for floatField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["doubleField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DoubleField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for doubleField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bytesField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BytesField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bytesField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nullField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Field_NullField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nullField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["arrayField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ArrayField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for arrayField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mapField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MapField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mapField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unionField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UnionField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unionField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enumField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnumField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enumField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fixedField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FixedField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fixedField")
	}
	val = func() json.RawMessage {
		if v, ok := fields["recordField"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecordField); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for recordField")
	}
	return nil
}
