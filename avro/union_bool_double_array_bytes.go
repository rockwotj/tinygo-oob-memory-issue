// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionBoolDoubleArrayBytesTypeEnum int

const (
	UnionBoolDoubleArrayBytesTypeEnumBool UnionBoolDoubleArrayBytesTypeEnum = 0

	UnionBoolDoubleArrayBytesTypeEnumDouble UnionBoolDoubleArrayBytesTypeEnum = 1

	UnionBoolDoubleArrayBytesTypeEnumArrayBytes UnionBoolDoubleArrayBytesTypeEnum = 2
)

type UnionBoolDoubleArrayBytes struct {
	Bool       bool
	Double     float64
	ArrayBytes []Bytes
	UnionType  UnionBoolDoubleArrayBytesTypeEnum
}

func writeUnionBoolDoubleArrayBytes(r UnionBoolDoubleArrayBytes, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionBoolDoubleArrayBytesTypeEnumBool:
		return vm.WriteBool(r.Bool, w)
	case UnionBoolDoubleArrayBytesTypeEnumDouble:
		return vm.WriteDouble(r.Double, w)
	case UnionBoolDoubleArrayBytesTypeEnumArrayBytes:
		return writeArrayBytes(r.ArrayBytes, w)
	}
	return fmt.Errorf("invalid value for UnionBoolDoubleArrayBytes")
}

func NewUnionBoolDoubleArrayBytes() UnionBoolDoubleArrayBytes {
	return UnionBoolDoubleArrayBytes{}
}

func (r UnionBoolDoubleArrayBytes) Serialize(w io.Writer) error {
	return writeUnionBoolDoubleArrayBytes(r, w)
}

func DeserializeUnionBoolDoubleArrayBytes(r io.Reader) (UnionBoolDoubleArrayBytes, error) {
	t := NewUnionBoolDoubleArrayBytes()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionBoolDoubleArrayBytesFromSchema(r io.Reader, schema string) (UnionBoolDoubleArrayBytes, error) {
	t := NewUnionBoolDoubleArrayBytes()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r UnionBoolDoubleArrayBytes) Schema() string {
	return "[\"boolean\",\"double\",{\"items\":\"bytes\",\"type\":\"array\"}]"
}

func (_ UnionBoolDoubleArrayBytes) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetInt(v int32)      { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetDouble(v float64) { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionBoolDoubleArrayBytes) SetLong(v int64) {

	r.UnionType = (UnionBoolDoubleArrayBytesTypeEnum)(v)
}

func (r *UnionBoolDoubleArrayBytes) Get(i int) types.Field {

	switch i {
	case 0:
		return &types.Boolean{Target: (&r.Bool)}
	case 1:
		return &types.Double{Target: (&r.Double)}
	case 2:
		r.ArrayBytes = make([]Bytes, 0)
		return &ArrayBytesWrapper{Target: (&r.ArrayBytes)}
	}
	panic("Unknown field index")
}
func (_ UnionBoolDoubleArrayBytes) NullField(i int)                  { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) HintSize(i int)                   { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UnionBoolDoubleArrayBytes) Finalize()                        {}

func (r UnionBoolDoubleArrayBytes) MarshalJSON() ([]byte, error) {

	switch r.UnionType {
	case UnionBoolDoubleArrayBytesTypeEnumBool:
		return json.Marshal(map[string]interface{}{"boolean": r.Bool})
	case UnionBoolDoubleArrayBytesTypeEnumDouble:
		return json.Marshal(map[string]interface{}{"double": r.Double})
	case UnionBoolDoubleArrayBytesTypeEnumArrayBytes:
		return json.Marshal(map[string]interface{}{"array": r.ArrayBytes})
	}
	return nil, fmt.Errorf("invalid value for UnionBoolDoubleArrayBytes")
}

func (r *UnionBoolDoubleArrayBytes) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["boolean"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.Bool)
	}
	if value, ok := fields["double"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Double)
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.ArrayBytes)
	}
	return fmt.Errorf("invalid value for UnionBoolDoubleArrayBytes")
}
