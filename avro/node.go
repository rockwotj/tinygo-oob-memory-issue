// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Node struct {
	Label string `json:"label"`

	Children []Node `json:"children"`
}

const NodeAvroCRC64Fingerprint = "1\xdb6\xd8@\xbe\x05\x1d"

func NewNode() Node {
	r := Node{}
	r.Children = make([]Node, 0)

	return r
}

func DeserializeNode(r io.Reader) (Node, error) {
	t := NewNode()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNodeFromSchema(r io.Reader, schema string) (Node, error) {
	t := NewNode()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNode(r Node, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Label, w)
	if err != nil {
		return err
	}
	err = writeArrayNode(r.Children, w)
	if err != nil {
		return err
	}
	return err
}

func (r Node) Serialize(w io.Writer) error {
	return writeNode(r, w)
}

func (r Node) Schema() string {
	return "{\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"children\",\"type\":{\"items\":\"org.apache.avro.Node\",\"type\":\"array\"}}],\"name\":\"org.apache.avro.Node\",\"type\":\"record\"}"
}

func (r Node) SchemaName() string {
	return "org.apache.avro.Node"
}

func (_ Node) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Node) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Node) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Node) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Node) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Node) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Node) SetString(v string)   { panic("Unsupported operation") }
func (_ Node) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Node) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Label}

		return w

	case 1:
		r.Children = make([]Node, 0)

		w := ArrayNodeWrapper{Target: &r.Children}

		return w

	}
	panic("Unknown field index")
}

func (r *Node) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Node) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Node) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Node) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Node) HintSize(int)                     { panic("Unsupported operation") }
func (_ Node) Finalize()                        {}

func (_ Node) AvroCRC64Fingerprint() []byte {
	return []byte(NodeAvroCRC64Fingerprint)
}

func (r Node) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["label"], err = json.Marshal(r.Label)
	if err != nil {
		return nil, err
	}
	output["children"], err = json.Marshal(r.Children)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Node) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["label"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Label); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for label")
	}
	val = func() json.RawMessage {
		if v, ok := fields["children"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Children); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for children")
	}
	return nil
}
